/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gestion.administrativa.hospital.la;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;


public class FormGestionUsuario extends javax.swing.JFrame {
    private JComboBox<String> comboRol;
    
    public FormGestionUsuario() {
        setTitle("Gestión de Usuarios");
        setSize(400, 350);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
        comboRol = new JComboBox<>(new String[]{"Administrador", "Medico", "Supervisor", "Auditor"});
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        LblHospital = new javax.swing.JLabel();
        LblLoayza = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        btnDesbloquear = new javax.swing.JButton();
        txtUsuario = new javax.swing.JTextField();
        btnCambiarRol1 = new javax.swing.JButton();
        btnBloquear = new javax.swing.JButton();
        JComboBox = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblHospital.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        LblHospital.setForeground(new java.awt.Color(6, 5, 235));
        LblHospital.setText("HOSPITAL ARZOBISPO");
        getContentPane().add(LblHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        LblLoayza.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        LblLoayza.setForeground(new java.awt.Color(236, 31, 54));
        LblLoayza.setText("LOAYZA NACIONAL");
        getContentPane().add(LblLoayza, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, -1, -1));

        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion/administrativa/hospital/la/logo.jpeg"))); // NOI18N
        getContentPane().add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 90));

        lbUsuario.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbUsuario.setForeground(new java.awt.Color(0, 0, 255));
        lbUsuario.setText("USUARIO");
        getContentPane().add(lbUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 70, 30));

        btnDesbloquear.setBackground(new java.awt.Color(0, 0, 255));
        btnDesbloquear.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDesbloquear.setForeground(new java.awt.Color(255, 255, 255));
        btnDesbloquear.setText("DESBLOQUEAR");
        btnDesbloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesbloquearActionPerformed(evt);
            }
        });
        getContentPane().add(btnDesbloquear, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 190, 40));
        getContentPane().add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 210, -1));

        btnCambiarRol1.setBackground(new java.awt.Color(0, 0, 255));
        btnCambiarRol1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCambiarRol1.setForeground(new java.awt.Color(255, 255, 255));
        btnCambiarRol1.setText("CAMBIAR ROL");
        btnCambiarRol1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarRol1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnCambiarRol1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 190, 40));

        btnBloquear.setBackground(new java.awt.Color(0, 0, 255));
        btnBloquear.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBloquear.setForeground(new java.awt.Color(255, 255, 255));
        btnBloquear.setText("BLOQUEAR");
        btnBloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBloquearActionPerformed(evt);
            }
        });
        getContentPane().add(btnBloquear, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 190, 40));

        JComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Supervisor", "Medico", "Auditor" }));
        getContentPane().add(JComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 160, -1));

        btnEliminar.setBackground(new java.awt.Color(0, 0, 255));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 430, 190, 40));

        btnVolver.setBackground(new java.awt.Color(0, 0, 255));
        btnVolver.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("VOLVER");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 110, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion/administrativa/hospital/la/Gestion-usuario.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 0, -1, 500));

        pack();
    }//GEN-END:initComponents

    private void btnCambiarRol1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarRol1ActionPerformed
       String usuario = txtUsuario.getText().trim();
        String nuevoRol = JComboBox.getSelectedItem().toString(); // Use JComboBox instead of comboRol
        if (usuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo usuario es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Login.rolusuario.equals("Administrador")) {
            JOptionPane.showMessageDialog(this, "Solo los administradores pueden cambiar roles.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Check if the user already has the selected role
        String rolActual = getCurrentRole(usuario);
        if (rolActual != null && rolActual.equals(nuevoRol)) {
            JOptionPane.showMessageDialog(this, "El usuario ya tiene el rol " + nuevoRol + ".", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        // Confirm role change
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Cambiar el rol de " + usuario + " a " + nuevoRol + "?", 
            "Confirmar Cambio de Rol", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            Login.cambiarPermisos(usuario, nuevoRol);
        }
    }//GEN-LAST:event_btnCambiarRol1ActionPerformed

    
    
    private void btnBloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBloquearActionPerformed
        String usuario = txtUsuario.getText().trim();
        if (usuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo usuario es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Login.rolusuario.equals("Administrador")) {
            JOptionPane.showMessageDialog(this, "Solo los administradores pueden bloquear usuarios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (isUserBlocked(usuario)) {
            JOptionPane.showMessageDialog(this, "El usuario ya está bloqueado.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Bloquear al usuario " + usuario + "?", 
            "Confirmar Bloqueo", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            Login.bloquearUsuario(usuario, true);
        }
    }//GEN-LAST:event_btnBloquearActionPerformed

    private void btnDesbloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesbloquearActionPerformed
        String usuario = txtUsuario.getText().trim();
        if (usuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo usuario es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Login.rolusuario.equals("Administrador")) {
            JOptionPane.showMessageDialog(this, "Solo los administradores pueden desbloquear usuarios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!isUserBlocked(usuario)) {
            JOptionPane.showMessageDialog(this, "El usuario ya está desbloqueado.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Desbloquear al usuario " + usuario + "?", 
            "Confirmar Desbloqueo", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            Login.bloquearUsuario(usuario, false);
        }
    }//GEN-LAST:event_btnDesbloquearActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String usuario = txtUsuario.getText().trim();
        if (usuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo usuario es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Login.rolusuario.equals("Administrador")) {
            JOptionPane.showMessageDialog(this, "Solo los administradores pueden eliminar usuarios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Eliminar al usuario " + usuario + "?", 
            "Confirmar Eliminación", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            Login.eliminarUsuario(usuario);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.dispose();
        new FormMenu_Hospital().setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed

    private String getCurrentRole(String usuario) {
        try {
            String rutaJSONAdministrador = "src/gestion/administrativa/hospital/la/admins.json";
            BufferedReader reader = new BufferedReader(new FileReader(rutaJSONAdministrador));
            StringBuilder contenido = new StringBuilder();
            String linea;
            while ((linea = reader.readLine()) != null) {
                contenido.append(linea);
            }
            reader.close();
            JSONArray arreglo = new JSONArray(contenido.toString());
            for (int i = 0; i < arreglo.length(); i++) {
                JSONObject objetoRol = arreglo.getJSONObject(i);
                String rol = objetoRol.keys().next();
                JSONObject datos = objetoRol.getJSONObject(rol);
                if (datos.getString("Usuario").equals(usuario)) {
                    return rol;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al verificar el rol actual: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al procesar la solicitud: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return null;
    }
        
    private boolean isUserBlocked(String usuario) {
        try {
            String rutaJSONAdministrador = "src/gestion/administrativa/hospital/la/admins.json";
            BufferedReader reader = new BufferedReader(new FileReader(rutaJSONAdministrador));
            StringBuilder contenido = new StringBuilder();
            String linea;
            while ((linea = reader.readLine()) != null) {
                contenido.append(linea);
            }
            reader.close();
            JSONArray arreglo = new JSONArray(contenido.toString());
            for (int i = 0; i < arreglo.length(); i++) {
                JSONObject objetoRol = arreglo.getJSONObject(i);
                String rol = objetoRol.keys().next();
                JSONObject datos = objetoRol.getJSONObject(rol);
                if (datos.getString("Usuario").equals(usuario)) {
                    return datos.optBoolean("Bloqueado", false);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al verificar el estado del usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al procesar la solicitud: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormGestionUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormGestionUsuario().setVisible(true);
            }
        });
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormGestionUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormGestionUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormGestionUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormGestionUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JComboBox;
    private javax.swing.JLabel LblHospital;
    private javax.swing.JLabel LblLoayza;
    private javax.swing.JButton btnBloquear;
    private javax.swing.JButton btnCambiarRol1;
    private javax.swing.JButton btnDesbloquear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel logo;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
